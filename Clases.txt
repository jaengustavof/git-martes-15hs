Clase 2 - 1.38.57


GIT es un grafo dirigido aciclico

Dirigido - porque cada una de las aristas apunta a un lado

Nodos (vertices)
Aristas

GIT Registra cambios
Se divide en 3 areas

working directory - Donde se crean los archovos html, css y js
Staging area(INDEX) - Donde se registran los archivos anteriores ya trabajados (aqui se hace el seguimiento)
repository - Una vez realizado el seguimiento, lo guardamos en el repository


COMANDOS-

clear - limpua
cd documents/ -abre carpeta document
cd .. - sale de la carpeta
dir -muestra los directorios
	ls - muestra una lista de los archivos con colores para difegrencia su tipo
mkdir - crea carpeta desde la consola
****** PARA INICIAR EL REPOSITORIO HAY QUE BORRAR LA CARPETA ******
rm -rf .git -> elimina la carpeta .git (remove /read and Force/ nombre carpeta)
****** PARA INICIAR EL REPOSITORIO HAY QUE BORRAR LA CARPETA ******

git init - Inicia un repositorio
git status - muestra el estado del repositorio	

<---------------------------------------------------------------------------->
git config -> para configurar git (cambiar el editor de codigo por ejemplo)
git config --global user .name "Gustavo Jaen" -> configuracion global
git config  user .name "Gustavo Jaen" -> configuracion para un solo proyecto
git config --global user.email "jaengustavof@gmail.com" ->Configuramos el email

Una vez tengamos todos lo anterior configurado podremos utilizar el commit
<---------------------------------------------------------------------------->

vim - comando para el editor de texto de git
vim index.html - crea el archivo index o abre el archivo index
git add -> captura el codigo que hayamos trabajado al mmomento
git add . -> Agrega todo lo que haya sido modificado
git commit -a -> actualiza un archivo que ya se encuentren en el area de control de cambios
git commit -> Va a abrir el editor de texto / Guardamos todo lo que necesitamos siempre agregando # al principio de la linea
git commit -m "Mensaje" -> Escribe un mensaje
git commit -am "Mensaje"-> agrego y confirmo
git commit --amend -> para modificar algo del commit
git commit --amend -m -> Para editar el mensaje
git commit --amend -am -> Realizar un arreglo y editar el mensaje

git remote add IT https://github.com/jaengustavof/git-martes-15hs -> Agrega un repositorio remoto con NOMBRE IT y la direccion http que ponemos
git push -u IT main -> hacemos seguimiento de lo que tenemos en el remoto IT // Subimos la rama main

git log -> Registro de los cambios en el repositorio
git log --oneline -> registro de los cambios en formato reducido
git checkout 8287de9 -> git checkout /numero de posicion del log --oneline -> nos muestra cómo se evie el proyecto en ese momento.
git log --oneline --all -> nos muestra todas las referencias (por si consultamos una referencia anterior)
git checout main -> volvemos a la ultima version

git blame index.html -> nos da un registro de que usuario modifico las lineas de codigo.
git diff HEAD -> compara el registro de cambios a nivel historial. Si hubo cambios, nos muestra 
		lo que está igual y qu'e cambió en colores
git diff HEAD^^ -> Es el ancestro o sea un commit anterior. ^^ serian
			dos anteriores.
git diff HEAD~2 -> Es lo mismo que lo anterior.

CLONAR 
$ git clone https://github.com/C215714N/git-martes-15hs GITM15 -> clonamos el repositorio github y lo copiamos a una nueva carpeta llamada GITM15 
git fetch origin(nombre del remote) -> trae el historial clase 2 - 1.05.40
git pull origin(nombre del remote) -> fusiona los cambios del remoto y el original clase 2 - 1.05.40


HELP
git commit --help   -> Abre la pagina con todos los comandos git
git commit --?      -> lo mismo que arriba pero reducido
git add --?


/c215714n/git-martes-15hs

consola vim
:wq - guardar y salir
:qa - quitar y cancelar
:! - forzado Cancelar todo
